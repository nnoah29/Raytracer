        -:    0:Source:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/utilitaires/vector_operation.cpp
        -:    0:Graph:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/cmake-build-debug-coverage/CMakeFiles/raytracer.dir/utilitaires/vector_operation.cpp.gcno
        -:    0:Data:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/cmake-build-debug-coverage/CMakeFiles/raytracer.dir/utilitaires/vector_operation.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:**  _                                              _      ___    ___  
        -:    3:** | |                                            | |    |__ \  / _ \
        -:    4:** | |_Created _       _ __   _ __    ___    __ _ | |__     ) || (_) |
        -:    5:** | '_ \ | | | |     | '_ \ | '_ \  / _ \  / _` || '_ \   / /  \__, |
        -:    6:** | |_) || |_| |     | | | || | | || (_) || (_| || | | | / /_    / / 
        -:    7:** |_.__/  \__, |     |_| |_||_| |_| \___/  \__,_||_| |_||____|  /_/ 
        -:    8:**          __/ |     on 27/04/25.                                          
        -:    9:**         |___/ 
        -:   10:*/
        -:   11:
        -:   12:#include "../includes/Vecteur.hpp"
        -:   13:#include "my.hpp"
        -:   14:
function _ZplRK7VecteurS1_ called 0 returned 0% blocks executed 0%
    #####:   15:Vecteur operator+(const Vecteur& v1, const Vecteur& v2) {
    #####:   16:    return {v1.x + v2.x, v1.y + v2.y, v1.z + v2.z};
    %%%%%:   16-block 2
appel   0 jamais exécuté
    %%%%%:   16-block 4
        -:   17:}
        -:   18:
function _ZmiRK7VecteurS1_ called 0 returned 0% blocks executed 0%
    #####:   19:Vecteur operator-(const Vecteur& v1, const Vecteur& v2) {
    #####:   20:    return {v1.x - v2.x, v1.y - v2.y, v1.z - v2.z};
    %%%%%:   20-block 2
appel   0 jamais exécuté
    %%%%%:   20-block 4
        -:   21:}
        -:   22:
function _ZmlRK7VecteurS1_ called 0 returned 0% blocks executed 0%
    #####:   23:Vecteur operator*(const Vecteur& v1, const Vecteur& v2) {
    #####:   24:    return {v1.x * v2.x, v1.y * v2.y, v1.z * v2.z};
    %%%%%:   24-block 2
appel   0 jamais exécuté
    %%%%%:   24-block 4
        -:   25:}
        -:   26:
function _ZmlRK7Vecteurf called 0 returned 0% blocks executed 0%
    #####:   27:Vecteur operator*(const Vecteur& v1, float t) {
    #####:   28:    return {v1.x * t, v1.y * t, v1.z * t};
    %%%%%:   28-block 2
appel   0 jamais exécuté
    %%%%%:   28-block 4
        -:   29:}
        -:   30:
function _ZmlfRK7Vecteur called 2231508 returned 100% blocks executed 100%
  2231508:   31:Vecteur operator*(float t, const Vecteur& v1) {
  2231508:   32:    return {v1.x * t, v1.y * t, v1.z * t};
  2231508:   32-block 2
appel   0 a retourné 2231508
  2231508:   32-block 4
        -:   33:}
        -:   34:
function _ZdvRK7Vecteurf called 2231508 returned 100% blocks executed 100%
  2231508:   35:Vecteur operator/(const Vecteur& v1, float t) {
  2231508:   36:    return (1 / t) * v1;
  2231508:   36-block 2
appel   0 a retourné 2231508
        -:   37:}
        -:   38:
function _Z3dotRK7VecteurS1_ called 46616342 returned 100% blocks executed 100%
 46616342:   39:float dot(const Vecteur& v1, const Vecteur& v2) {
 46616342:   40:    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
 46616342:   40-block 2
        -:   41:}
        -:   42:
function _Z5crossRK7VecteurS1_ called 2 returned 100% blocks executed 100%
        2:   43:Vecteur cross(const Vecteur& v1, const Vecteur& v2) {
        2:   44:    return { v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x };
        2:   44-block 2
appel   0 a retourné 2
        2:   44-block 4
        -:   45:}
        -:   46:
function _Z10unitVectorRK7Vecteur called 0 returned 0% blocks executed 0%
    #####:   47:Vecteur unitVector(const Vecteur& v) {
    #####:   48:    return v / v.length();
    %%%%%:   48-block 2
appel   0 jamais exécuté
appel   1 jamais exécuté
        -:   49:}
        -:   50:
        -:   51:
