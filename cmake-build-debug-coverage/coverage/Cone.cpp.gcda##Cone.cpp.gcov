        -:    0:Source:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/src/base/primitives/Cone.cpp
        -:    0:Graph:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/cmake-build-debug-coverage/CMakeFiles/raytracer.dir/src/base/primitives/Cone.cpp.gcno
        -:    0:Data:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/cmake-build-debug-coverage/CMakeFiles/raytracer.dir/src/base/primitives/Cone.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:** EPITECH PROJECT, 2024
        -:    3:** B-OOP-400-COT-4-1-raytracer-noah.toffa
        -:    4:** File description:
        -:    5:** Cone.cpp
        -:    6:*/
        -:    7:
        -:    8:#include"Cone.hpp"
        -:    9:
function _ZN4ConeC2ER13dataPrimitiveRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   10:Cone::Cone(dataPrimitive& data, const std::string& name): APrimitive(data, name) {}
    %%%%%:   10-block 2
appel   0 jamais exécuté
        -:   11:
function _ZNK4Cone3hitERK3RayffR13PointOfImpact called 0 returned 0% blocks executed 0%
    #####:   12:bool Cone::hit(const Ray& ray, float t_min, float t_max, PointOfImpact& p) const {
    #####:   13:    float k = data.radius / data.height;
    #####:   14:    float k2 = k * k;
        -:   15:
    #####:   16:    Vecteur o = ray.origin();
    %%%%%:   16-block 2
appel   0 jamais exécuté
    #####:   17:    Vecteur d = ray.direction();
appel   0 jamais exécuté
        -:   18:
    #####:   19:    float dx = d.x, dy = d.y, dz = d.z;
    #####:   20:    float ox = o.x, oy = o.y, oz = o.z;
        -:   21:
    #####:   22:    float A = dx*dx + dy*dy - k2 * dz*dz;
    #####:   23:    float B = 2 * (dx*ox + dy*oy - k2 * dz*oz);
    #####:   24:    float C = ox*ox + oy*oy - k2 * oz*oz;
        -:   25:
    #####:   26:    float discriminant = B*B - 4*A*C;
    #####:   27:    if (discriminant < 0)
branchement  0 jamais exécuté (fallthrough)
branchement  1 jamais exécuté
    #####:   28:        return false;
    %%%%%:   28-block 5
        -:   29:
    #####:   30:    float squareroot = std::sqrt(discriminant);
    %%%%%:   30-block 6
appel   0 jamais exécuté
    #####:   31:    float root = (-B - squareroot) / (2*A);
    #####:   32:    if (!surrounds(t_min, root, t_max)) {
appel   0 jamais exécuté
branchement  1 jamais exécuté (fallthrough)
branchement  2 jamais exécuté (throw)
    %%%%%:   32-block 8
branchement  3 jamais exécuté (fallthrough)
branchement  4 jamais exécuté
    #####:   33:        root = (-B + squareroot) / (2*A);
    #####:   34:        if (!surrounds(t_min, root, t_max))
    %%%%%:   34-block 9
appel   0 jamais exécuté
branchement  1 jamais exécuté (fallthrough)
branchement  2 jamais exécuté (throw)
    %%%%%:   34-block 10
branchement  3 jamais exécuté (fallthrough)
branchement  4 jamais exécuté
    #####:   35:            return false;
    %%%%%:   35-block 11
        -:   36:    }
        -:   37:
    #####:   38:    float z = ray.at(root).z;
    %%%%%:   38-block 12
appel   0 jamais exécuté
    #####:   39:    if (z < 0 || z > data.height)
branchement  0 jamais exécuté (fallthrough)
branchement  1 jamais exécuté
    %%%%%:   39-block 14
branchement  2 jamais exécuté (fallthrough)
branchement  3 jamais exécuté
    #####:   40:        return false;
    %%%%%:   40-block 15
        -:   41:
    #####:   42:    p.t = root;
    #####:   43:    p.p = ray.at(p.t);
    %%%%%:   43-block 16
appel   0 jamais exécuté
        -:   44:
    #####:   45:    Vecteur v = p.p;
    #####:   46:    p.set_face_normal(ray, v.normalized());
appel   0 jamais exécuté
appel   1 jamais exécuté
        -:   47:
    #####:   48:    return true;
        -:   49:}
