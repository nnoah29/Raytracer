        -:    0:Source:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/app/main.cpp
        -:    0:Graph:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/cmake-build-debug-coverage/CMakeFiles/raytracer.dir/app/main.cpp.gcno
        -:    0:Data:/home/nnoah/_WORKS/SCHooL_/RAYTRACER_/cmake-build-debug-coverage/CMakeFiles/raytracer.dir/app/main.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2:**  _                                              _      ___    ___  
        -:    3:** | |                                            | |    |__ \  / _ \
        -:    4:** | |_Created _       _ __   _ __    ___    __ _ | |__     ) || (_) |
        -:    5:** | '_ \ | | | |     | '_ \ | '_ \  / _ \  / _` || '_ \   / /  \__, |
        -:    6:** | |_) || |_| |     | | | || | | || (_) || (_| || | | | / /_    / / 
        -:    7:** |_.__/  \__, |     |_| |_||_| |_| \___/  \__,_||_| |_||____|  /_/ 
        -:    8:**          __/ |     on 25/04/25.                                          
        -:    9:**         |___/ 
        -:   10:*/
        -:   11:
        -:   12:#include <iostream>
        -:   13:#include <thread>
        -:   14:
        -:   15:#include "../src/Factory.hpp"
        -:   16:#include "../src/PluginsLoader.hpp"
        -:   17:#include "../src/Raytracer.hpp"
        -:   18:#include "../src/Render.hpp"
        -:   19:#include "../src/SceneLoader.hpp"
        -:   20:/// Logique du programme
        -:   21:/// 1. La caméra génère un rayon → (x, y)
        -:   22:/// 2. Le rayon touche une primitive ? → Oui ? → continue
        -:   23:/// 3. Je regarde où ça touche et quelle est la normale
        -:   24:/// 4. J’utilise les lumières de la scène pour savoir
        -:   25:///     - Est-ce qu’on voit ce point ?
        -:   26:///     - Est-ce qu’il est dans l’ombre ?
        -:   27:///     - À quel point il est éclairé ?
        -:   28:/// 5. Je combine ça avec la couleur du matériau
        -:   29:/// 6. J’écris la couleur dans l’image finale
        -:   30:///
        -:   31:
function main called 1 returned 0% blocks executed 32%
        1:   32:int main(int argc, char *argv[])
        -:   33:{
        -:   34:    try {
        1:   35:        Factory factory;
        1:   35-block 2
appel   0 a retourné 1
branchement  1 pris 1 (fallthrough)
branchement  2 pris 0 (throw)
        1:   36:        PluginsLoader     loader_p(argv, &factory);
        1:   36-block 3
appel   0 a retourné 1
branchement  1 pris 1 (fallthrough)
branchement  2 pris 0 (throw)
        1:   37:        const SceneLoader loader_s(std::string(argv[1]), argc);
        1:   37-block 6
appel   0 a retourné 1
branchement  1 pris 1 (fallthrough)
branchement  2 pris 0 (throw)
        1:   37-block 7
appel   3 a retourné 1
branchement  4 pris 1 (fallthrough)
branchement  5 pris 0 (throw)
        1:   37-block 8
appel   6 a retourné 1
    $$$$$:   37-block 26
appel   7 jamais exécuté
    $$$$$:   37-block 30
    $$$$$:   37-block 31
        -:   38:
        1:   39:        Scene scene = loader_s.createScene(factory);
        1:   39-block 10
appel   0 a retourné 1
branchement  1 pris 1 (fallthrough)
branchement  2 pris 0 (throw)
        1:   40:        Render render(WEIGHT_IMG, HEIGHT_IMG, "exemple");
        1:   40-block 13
appel   0 a retourné 1
branchement  1 pris 1 (fallthrough)
branchement  2 pris 0 (throw)
        1:   40-block 14
appel   3 a retourné 1
branchement  4 pris 1 (fallthrough)
branchement  5 pris 0 (throw)
        1:   40-block 15
appel   6 a retourné 1
    $$$$$:   40-block 32
appel   7 jamais exécuté
    $$$$$:   40-block 36
    $$$$$:   40-block 37
        1:   41:        Raytracer raytracer(scene, render);
        1:   41-block 17
appel   0 a retourné 1
branchement  1 pris 1 (fallthrough)
branchement  2 pris 0 (throw)
        1:   42:        raytracer.render();
        1:   42-block 18
appel   0 a retourné 0
branchement  1 pris 0 (fallthrough)
branchement  2 pris 0 (throw)
    #####:   43:    } catch (const std::exception &e) {
    %%%%%:   43-block 19
appel   0 jamais exécuté
appel   1 jamais exécuté
appel   2 jamais exécuté
appel   3 jamais exécuté
appel   4 jamais exécuté
    $$$$$:   43-block 38
appel   5 jamais exécuté
    $$$$$:   43-block 40
appel   6 jamais exécuté
    $$$$$:   43-block 42
appel   7 jamais exécuté
    $$$$$:   43-block 44
appel   8 jamais exécuté
    $$$$$:   43-block 46
appel   9 jamais exécuté
    $$$$$:   43-block 49
branchement 10 jamais exécuté (fallthrough)
branchement 11 jamais exécuté
    $$$$$:   43-block 51
appel  12 jamais exécuté
    =====:   44:        std::cerr << e.what() << std::endl;
appel   0 jamais exécuté
appel   1 jamais exécuté
branchement  2 jamais exécuté (fallthrough)
branchement  3 jamais exécuté (throw)
    $$$$$:   44-block 54
appel   4 jamais exécuté
branchement  5 jamais exécuté (fallthrough)
branchement  6 jamais exécuté (throw)
    =====:   45:        return 84;
    =====:   46:    }
    $$$$$:   46-block 55
appel   0 jamais exécuté
    $$$$$:   46-block 56
appel   1 jamais exécuté
    #####:   47:}
        -:   48:
